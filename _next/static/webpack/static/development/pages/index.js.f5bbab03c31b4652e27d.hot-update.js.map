{"version":3,"file":"static/webpack/static/development/pages/index.js.f5bbab03c31b4652e27d.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport BN from 'bignumber.js';\nimport {getContractInstance} from '../artifacts';\n// import Router, {useRouter} from 'next/router';\n\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n// import InputBase from '@material-ui/core/InputBase';\nimport MineIcon from 'mdi-material-ui/Pickaxe';\nimport cn from 'classnames';\n\nimport Root from '../components/Root';\nimport {useEtherProvider, useAccount} from 'use-ether-provider';\n\nconst useStyles = makeStyles(theme => ({\n  header: {\n    backgroundColor: '#000000',\n    padding: '20px',\n    margin: '0 0 20px 0'\n  },\n  font: {\n    color: '#ffffff'\n  },\n  cell: {\n    backgroundColor: '#eeeeee',\n    borderRadius: '5px',\n    padding: '5px'\n  },\n  line: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%'\n  },\n  mainCont: {\n    padding: '10px',\n    margin: 'auto',\n    maxWidth: '600px'\n  },\n  inputCont: {\n    padding: '20px'\n  },\n  input: {\n    // flex: 1,\n    margin: '20px 0'\n  },\n  btnIcon: {\n    margin: '0 0 0 10px'\n  },\n  upper: {\n    margin: '50px 0 0 0'\n  },\n  tx: {\n    margin: '0 0 10px 0'\n  },\n  smbtn: {\n    height: '30px'\n  }\n}));\n\nfunction short(str, len) {\n  return `${str.substring(0, len)}...${str.substring(str.length - len)}`;\n}\n\nfunction validate(address, amount, currentAmount) {\n  const stats = {\n    eAddress: false,\n    eAmount: false\n  };\n  if (!/^0x[0-9a-fA-F]{40}$/.test(address)) {\n    stats.eAddress = true;\n  }\n  if (amount < 1 || (parseInt(amount, 10) + parseInt(currentAmount, 10)) > 1000) {\n    stats.eAmount = true;\n  }\n  return stats;\n}\n\nfunction toUSD(bn) {\n  return new BN(bn.toString()).dividedBy(1e6).toString();\n}\n\nlet Index = ({\n  dispatchGeneFetch,\n  pinnedDragons = [],\n  genes = {}\n}) => {\n  const classes = useStyles();\n  const [address, setAddress] = useState('');\n  const [amount, setAmount] = useState(1);\n  const [txs, setTxs] = useState([]);\n  const [addrErr, setAddrErr] = useState(false);\n  const [amountErr, setAmountErr] = useState(false);\n\n  const etherProvider = useEtherProvider();\n  const myAddress = useAccount(etherProvider);\n\n  const [usdtContract, setUsdtContract] = useState(null);\n  const [myBalance, setMyBalance] = useState('0.0');\n\n  useEffect(() => {\n    let interval;\n    if (etherProvider) {\n      const contract = getContractInstance(etherProvider.getSigner(), 4);\n      setUsdtContract(contract);\n\n      if (interval) {\n        clearInterval(interval);\n      }\n      if (myAddress) {\n        contract.balanceOf(myAddress).then(balance => setMyBalance(\n          toUSD(balance)\n        ));\n        interval = setInterval(() => {\n          // console.log(myAddress);\n          contract.balanceOf(myAddress).then(balance => setMyBalance(\n            toUSD(balance)\n          ));\n        }, 10000); // 10s\n      }\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  }, [myAddress, etherProvider]);\n\n  return (\n    <Root>\n      <div className={classes.header}>\n        <Typography className={classes.font}>Bybit Testnet USDT Faucet</Typography>\n      </div>\n      <div className={classes.mainCont}>\n        <Paper className={classes.inputCont}>\n          <div className={classes.cell}>\n            <Typography>{`My Balance: ${myBalance} TUSDT`}</Typography>\n          </div>\n          <div className={classes.line}>\n            <TextField required id={'address'} label={'ETH address'} spellCheck={false}\n              error={addrErr}\n              helperText={addrErr ? 'eth address incorrect!' : ''}\n              className={classes.input}\n              fullWidth\n              value={address}\n              placeholder={'0x1234...'}\n              onChange={e => setAddress(e.target.value)} />\n            <Button className={classes.smbtn} variant={'contained'} size={'small'} onClick={e => setAddress(myAddress)}>Self</Button>\n          </div>\n          <TextField required id={'amount'} label={'Token Amount'} type={'number'}\n            error={amountErr}\n            helperText={amountErr ? 'can only mint up to 1 - 1000 TUSDT' : ''}\n            className={classes.input}\n            fullWidth\n            value={amount}\n            inputProps={{min: 1}}\n            onChange={e => setAmount(e.target.value)} />\n\n          <Button className={classes.iconButton}\n            color={'primary'}\n            aria-label={'Mint'}\n            variant={'contained'}\n            onClick={e => {\n              const {eAddress, eAmount} = validate(address, amount, myBalance);\n              setAddrErr(eAddress);\n              setAmountErr(eAmount);\n              // console.log(`${eAddress}, ${eAmount}`);\n              if (!eAddress && !eAmount) {\n                usdtContract.mint(address, new BN(amount).times(1e6).toString()).then(tx => {\n                  if (tx.hash) {\n                    setTxs([...txs, tx.hash]);\n                  }\n                });\n              }\n            }}>\n            Mint Token\n            <MineIcon className={classes.btnIcon} />\n          </Button>\n        </Paper>\n        {txs && txs.length > 0 && (\n          <Paper className={cn(classes.inputCont, classes.upper)}>\n            {\n              txs.map(tx => (\n                <div key={tx} className={classes.tx}>\n                  <a target={'_blank'} href={`https://rinkeby.etherscan.io/tx/${tx}`}>{short(tx, 8)}</a>\n                </div>\n              ))\n            }\n          </Paper>\n        )}\n      </div>\n    </Root>\n  );\n};\n\nexport default Index;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAxCA;AAAA;AACA;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAVA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAaA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAWA;AACA;AACA;;;;A","sourceRoot":""}